" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc


"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
""" Map leader to space ---------------------
let mapleader=" "

" Do incremental searching.
set incsearch
set hlsearch
set surround

" Don't use Ex mode, use Q for formatting.
map Q gq
set notimeout
set relativenumber
set number
set scrolloff=8
set smartindent
set which-key

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
Plug 'justinmk/vim-sneak'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'unblevable/quick-scope'

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
map <leader>vf <Action>(ReformatCode)
" -- debug map
map <leader>b <Action>(ToggleLineBreakpoint)
map <leader>dp <Action>(Debug)
map <leader>ds <Action>(Stop)
map <leader>r <Action>(RenameElement)
" -- file and folder map
map <leader>fo <Action>(FileStructurePopup)
map <leader>fv <Action>(SelectInProjectView)
map <leader>fcc <Action>(CloseContent)
map <leader>fs <Action>(DirectoryStructure)
map <leader>fh <Action>(Vcs.ShowTabbedFileHistory)
map <S-Space> <Action>(GotoNextError)
" -- editor tab map
"map <shift>y <Action>($Copy)
"map <shift>p <Action>($Paste)
map <leader>etr <Action>(MoveTabRight)
map <leader>etl <Action>(MoveTabLeft)
map <leader>eog <Action>(MoveEditorToOppositeTabGroup)
map <leader>eta <Action>(UnsplitAll)
map <leader>ehw <Action>(HideActiveWindow)

map <leader>rvr <Action>(IdeaVim.ReloadVimRc.reload)

map H h

" Harpoon
map <leader>a <Action>(AddToHarpoon)
map <C-e> <Action>(ShowHarpoon)

" multiple cursors
" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
" Feel free to pick your own mappings that are not affected. I like to use <leader>
nmap <leader><C-n> <Plug>AllWholeOccurrences
xmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
xmap <leader>g<C-n> <Plug>AllOccurrences

" vim which key
let g:WhichKeyDesc_windows        = "<Space>w  Windows"
let g:WhichKeyDesc_windows_delete = "<Space>wd delete"
let g:WhichKeyDesc_windows_split  = "<Space>ws split below"
let g:WhichKey_ShowVimActions = "true"
set timeoutlen=100

" quick scope
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" Trigger a highlight only when pressing f and F.
let g:qs_highlight_on_keys = ['f', 'F']
